name: Build and Run ChatGPT-Discord-Bot Docker

on:
  push:
    branches:
      - main

jobs:
  # Run unit tests for the project
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5.3.0
        with:
          python-version: '3.12.3'
        
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest
          pip install -r requirements.txt

      - name: Run unit tests
        run: |
          python -m pytest tests/
      
      # Run security check
      - name: pyupio/safety-action
        uses: pyupio/safety-action@v1.0.1
        with:
          api-key: ${{ secrets.SAFETY_API_KEY }}
     
  
  # Build and push package to GitHub Container Registry (GHCR)
  build-and-push:
    runs-on: ubuntu-latest 
    environment: Private Server Deploy
    needs: test  # This job depends on the CI job
    steps:
      - name: Check out the repository
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build the Docker image
        run: |
          IMAGE_NAME=ghcr.io/coder-vippro/chatgpt-discord-bot
          IMAGE_TAG=latest
          docker build -t $IMAGE_NAME:$IMAGE_TAG .

      - name: Push the Docker image
        run: |
          IMAGE_NAME=ghcr.io/coder-vippro/chatgpt-discord-bot
          IMAGE_TAG=latest
          docker push $IMAGE_NAME:$IMAGE_TAG

  # Deploy from GHCR to the main server
  deploy:
    runs-on: self-hosted
    environment: Private Server Deploy
    needs: build-and-push
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create Kubernetes secrets
        env:
          DISCORD_TOKEN: ${{ secrets.DISCORD_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          RUNWARE_API_KEY: ${{ secrets.RUNWARE_API_KEY }}
          GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}
          GOOGLE_CX: ${{ secrets.GOOGLE_CX }}
          OPENAI_BASE_URL: ${{ secrets.OPENAI_BASE_URL }}
          MONGODB_URI: ${{ secrets.MONGODB_URI }}
        run: |
          kubectl delete secret bot-secrets || true

          # Encode secrets as Base64
          echo -n "$DISCORD_TOKEN" | base64 > discord_token_b64.txt
          echo -n "$OPENAI_API_KEY" | base64 > openai_api_key_b64.txt
          echo -n "$RUNWARE_API_KEY" | base64 > runware_api_key_b64.txt
          echo -n "$GOOGLE_API_KEY" | base64 > google_api_key_b64.txt
          echo -n "$GOOGLE_CX" | base64 > google_cx_b64.txt
          echo -n "$OPENAI_BASE_URL" | base64 > openai_base_url_b64.txt
          echo -n "$MONGODB_URI" | base64 > mongodb_uri_b64.txt

          kubectl create secret generic bot-secrets \
            --from-file=DISCORD_TOKEN=discord_token_b64.txt \
            --from-file=OPENAI_API_KEY=openai_api_key_b64.txt \
            --from-file=RUNWARE_API_KEY=runware_api_key_b64.txt \
            --from-file=GOOGLE_API_KEY=google_api_key_b64.txt \
            --from-file=GOOGLE_CX=google_cx_b64.txt \
            --from-file=OPENAI_BASE_URL=openai_base_url_b64.txt \
            --from-file=MONGODB_URI=mongodb_uri_b64.txt

      - name: Apply Kubernetes manifests
        run: |
          kubectl apply -f /home/vps/actions-runner/chatgpt-discord-bot/k3s/chatgpt-discord-bot-deployment.yaml
